{
  "_args": [
    [
      {
        "raw": "reload",
        "scope": null,
        "escapedName": "reload",
        "name": "reload",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/joe/Desktop/A-FRAME"
    ]
  ],
  "_from": "reload@latest",
  "_id": "reload@1.1.3",
  "_inCache": true,
  "_location": "/reload",
  "_nodeVersion": "7.5.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/reload-1.1.3.tgz_1493390310819_0.2952091123443097"
  },
  "_npmUser": {
    "name": "alallier",
    "email": "alexanderlallier@aol.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "reload",
    "scope": null,
    "escapedName": "reload",
    "name": "reload",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/reload/-/reload-1.1.3.tgz",
  "_shasum": "2096e45472a8bc31a401c696be8429ed56216d6a",
  "_shrinkwrap": null,
  "_spec": "reload",
  "_where": "/Users/joe/Desktop/A-FRAME",
  "author": {
    "name": "JP Richardson",
    "email": "jprichardson@gmail.com"
  },
  "bin": {
    "reload": "./bin/reload"
  },
  "bugs": {
    "url": "https://github.com/jprichardson/reload/issues"
  },
  "contributors": [
    {
      "name": "Alexander J. Lallier",
      "email": "alexanderlallier@aol.com"
    }
  ],
  "dependencies": {
    "cli-color": "~1.1.0",
    "commander": "~2.9.0",
    "death": "~1.0.0",
    "express": "~4.14.0",
    "minimist": "~1.2.0",
    "open": "~0.0.5",
    "supervisor": "~0.11.0",
    "ws": "~1.1.1"
  },
  "description": "Node.js module to refresh and reload your code in your browser when your code changes. No browser plugins required.",
  "devDependencies": {
    "standard": "^10.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "2096e45472a8bc31a401c696be8429ed56216d6a",
    "tarball": "https://registry.npmjs.org/reload/-/reload-1.1.3.tgz"
  },
  "gitHead": "8ca15ca3147edd95f3aaa621d76940e25be12fb1",
  "homepage": "https://github.com/jprichardson/reload#readme",
  "keywords": [
    "reload",
    "refresh",
    "http",
    "express",
    "development"
  ],
  "license": "MIT",
  "main": "./lib/reload.js",
  "maintainers": [
    {
      "name": "alallier",
      "email": "alexanderlallier@aol.com"
    },
    {
      "name": "jprichardson",
      "email": "jprichardson@gmail.com"
    },
    {
      "name": "vesln",
      "email": "hi@vesln.com"
    }
  ],
  "name": "reload",
  "optionalDependencies": {},
  "readme": "reload\n=======\n\n[![build status](https://api.travis-ci.org/jprichardson/reload.svg)](http://travis-ci.org/jprichardson/reload)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n[![NPM version](https://img.shields.io/npm/v/reload.svg?style=flat-square)](https://www.npmjs.com/package/reload)\n\nAutomatically refresh and reload your code in your browser when your code changes. No browser plugins required.\n\nWhy?\n----\n\nRestarting your HTTP server and refreshing your browser is annoying.\n\nHow does it work?\n----------\n\nReload works in two different ways depending on if you're using it:\n\n1. In an existing Express application in which it creates a server side route for reload or,\n2. As a command line tool which starts its own Express application to monitor the file you're editing for changes and to serve `reload-client.js` to the browser.\n\nOnce reload-server and reload-client are connected, the client side code opens a [WebSocket](https://en.wikipedia.org/wiki/WebSocket) to the server and waits for the WebSocket to close, once it closes, reload waits for the server to come back up (waiting for a socket on open event), once the socket opens we reload the page.\n\nInstallation\n---\n\n    npm install [-g] [--save-dev] reload\n\n\nTwo ways to use reload\n---\n\nThere are two different ways to use reload.\n\n1. In an [Express](http://expressjs.com/) application, allowing your whole project to utilize reload when the code is altered\n2. As a command line application to serve up static HTML files and be able to reload when the code is altered\n\nUsing reload in Express\n---\nWhen used with Express reload creates a new Express route for reload. When you restart the server, the client will detect the server being restarted and automatically refresh the page.\n\nReload can be used in conjunction with tools that allow for automatically restarting the server such as [supervisor](https://github.com/isaacs/node-supervisor) (recommended), [nodemon](https://github.com/remy/nodemon), [forever](https://github.com/nodejitsu/forever), etc.\n\n### Express Example\n\n**`server.js`:**\n```javascript\nvar express = require('express')\nvar http = require('http')\nvar path = require('path')\nvar reload = require('reload')\nvar bodyParser = require('body-parser')\nvar logger = require('morgan')\n\nvar app = express()\n\nvar publicDir = path.join(__dirname, 'public')\n\napp.set('port', process.env.PORT || 3000)\napp.use(logger('dev'))\napp.use(bodyParser.json()) //parses json, multi-part (file), url-encoded\n\napp.get('/', function(req, res) {\n  res.sendFile(path.join(publicDir, 'index.html'))\n})\n\nvar server = http.createServer(app)\n\n// Reload code here\nreload(server, app)\n\nserver.listen(app.get('port'), function(){\n  console.log(\"Web server listening on port \" + app.get('port'));\n});\n```\n\n**`public/index.html`:**\n```html\n<!doctype html>\n<html>\n  <head>\n    <title>Reload Express Sample App</title>\n  </head>\n  <body>\n  \t<h1>Reload Express Sample App12</h1>\n    <!-- All you have to do is include the reload script and have it be on every page of your project -->\n    <script src=\"/reload/reload.js\"></script>\n  </body>\n</html>\n```\n\n**Refer to the [reload express sample app](https://github.com/jprichardson/reload/tree/master/expressSampleApp) for this working example.**\n\n### Manually firing server-side reload events\n\nYou can manually call a reload event by calling `reload()` yourself. An example is shown below:\n\n```javascript\nreloadServer = reload(server, app);\nwatch.watchTree(__dirname + \"/public\", function (f, curr, prev) {\n    // Fire server-side reload event\n    reloadServer.reload();\n});\n```\n\n### API for Express\n\n```\nreload(httpServer, expressApp, [verbose])\n```\n\n- `httpServer`:  The Node.js http server from the module `http`.\n- `expressApp`:  The express app. It may work with other frameworks, or even with Connect. At this time, it's only been tested with Express.\n- `verbose`:     If set to true, will show logging on the server and client side\n\nUsing reload as a command line application\n---\n\nThere are two ways to use the command line application.\n\n1. In a directory serving blank static HTML files or\n2. In a project with a `package.json` file\n\nEach will require different modes of installing.\n\nIn case one you should install reload globally with `npm install reload -g`. Also with reload installed globally you can go to any directory with an HTML file and use the command reload to constantly watch it and reload it while you make changes.\n\nIn case two you should install locally with `npm install --save-dev`, since this tool is to aid in development you should install it as a dev dependency.\n\nNavigate to your html directory:\n\n    reload -b\n\nThis will open your `index.html` file in the browser. Any changes that you make will now reload in the browser. You don't need to modify your HTML at all.\n\n### Usage for Command Line Application\n\n```\nUsage: reload [options]\n\nOptions:\n\n  -h, --help                        Output usage information\n  -V, --version                     Output the version number\n  -b, --browser                     Open in the browser automatically.\n  -n, --hostname                    If -b flag is being used, this allows for custom hostnames. Defaults to localhost.\n  -d, --dir [dir]                   The directory to serve up. Defaults to current dir.\n  -e, --exts [extensions]           Extensions separated by commas or pipes. Defaults to html,js,css.\n  -p, --port [port]                 The port to bind to. Can be set with PORT env variable as well. Defaults to 8080\n  -s, --start-page [start-page]\t\tSpecify a start page. Defaults to index.html.\n  -v, --verbose\t\t\t\t\t\tTurns on logging on the server and client side. Defaults to false.\n```\n\nLicense\n---\n\n(MIT License)\n\nCopyright 2016, JP Richardson  <jprichardson@gmail.com>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/jprichardson/reload.git"
  },
  "scripts": {
    "standard": "standard",
    "test": "npm run standard"
  },
  "version": "1.1.3"
}
